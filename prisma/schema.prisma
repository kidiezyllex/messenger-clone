datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id                     String          @id @default(uuid())
  name                   String?
  email                  String?         @unique
  emailVerified          DateTime?
  image                  String?
  hashedPassword         String?
  lastConversationId     String?
  createAt               DateTime        @default(now())
  updateAt               DateTime        @updatedAt
  blockedUserIdList      String[]
  conversations          Conversation[]  @relation("UserConversations")
  seenMessages           Message[]       @relation("UserSeenMessages")
  accounts               Account[]
  messages               Message[]
  sentMessages           Message[]       @relation("MessageSender")
  userId                 String?
  Conversation           Conversation[]
  groups                 Conversation[]  @relation("GroupCreator")
  friends                Friend[]        @relation("UserFriends")
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  lastMessageAt  DateTime  @default(now())
  name           String?
  isGroup        Boolean?
  groupImage     String?
  groupCreator   User?     @relation("GroupCreator", fields: [groupCreatorId], references: [id], onDelete: Cascade)
  groupCreatorId String?
  usersIds       String[]
  users          User[]    @relation("UserConversations")
  messages       Message[]
  messagesIds    String[]
  User           User?     @relation(fields: [userId], references: [id])
  userId         String?
}

model Message {
  id             String       @id @default(uuid())
  text           String
  type           String
  image          String?
  createdAt      DateTime     @default(now())
  seen           User[]       @relation("UserSeenMessages")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  user           User?        @relation(fields: [userId], references: [id])
  userId         String?
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
}

model Friend {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  friend    User     @relation("UserFriends", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model FriendRequest {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  status     String   @default("pending") // Can be "pending", "accepted", or "rejected"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}
